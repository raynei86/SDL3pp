/**
@defgroup DesignNotes Design notes

Design notes on this project.

Here we describe common design aspects and patterns used in the project. To 
have an idea on all fits together you may look into @ref transformations.

@sa @ref transformations

@{
*/

/**
@defgroup resource Resource

A Resource is a type where its memory is controlled by SDL, usually with
functions like `SDL_Create*()` and `SDL_Destroy*()`.

To represent this type, we first create [CRTP](https://en.cppreference.com/w/cpp/language/crtp)
base class that contains all the functions, but delegates the actual storage to
its base class. There is currently two available base classes, ObjectUnique and
ObjectRef, and we use them to typedef an owning and a non owning versions of 
the resource. For example, for SDL_Surface we have:

- SurfaceBase: struct with all OO-like functions wrapped as member functions;
- Surface: an alias for the SurfaceBase instantiated with ObjectUnique, this is
  the owning version, so it will destruct the contained surface when it goes 
  out of scope by the good old [RAII rules](https://en.cppreference.com/w/cpp/language/raii);
  - You can still opt out of this by either calling ObjectUnique::release() or
    move assigning it to SurfaceRef;
- SurfaceRef: an alias for the SurfaceBase instantiated with ObjectRef, this is
  the @b non owning version, so it can be safely used for parameters that do 
  not take ownership, to use like a rudimentary borrowed or week reference, or
  just to opt out of RAII and managing the lifetime by yourself;
  - You can destroy manually the resource by calling the respective *Destroy
    method, eg. SurfaceBase::Destroy().

*/

/**
@defgroup callback Callback

A callback is a invocable object passed to a function as a customization point.


@{
*/

/**
@defgroup SyncCallback Immediate callback

Immediate callback or synchronous callback is always invoked before the callee
function returns. Because of this, there is no need to be store/marshal data
as @ref AsyncCallback does.
*/

/**
@defgroup AsyncCallback Delayed callback

Delayed or Asynchronous callback is a callback that may be invoked after the 
callee returns. This might be when some event occurs or when a given result 
available.
@{
*/

/**
@defgroup ResultCallback Result callback

Result callback is invoked at single point and then discarded. This means that
after its called it safe to free any memory it is holding. The CallbackWrapper 
is perfect to safely wrap it and avoid dangling pointer. An example of such 
uses is RunOnMainThread().
*/

/**
@defgroup ListenerCallback Listener callback

Listener callback is invoked multiple times whenever the event it subscripted
happens. It's not safe to free memory after call, so a separate mechanism must
be provided.

When there is a single listener per program, like SetEventFilter(), you we can
use UniqueWrapper, which makes sure only a single one per type exists.

When there can be just a single callback listening per resource we can use 
KeyValueWrapper with a Resource pointer as key. An example of this technique is
in WindowBase::SetHitTest(HitTestFunction). We need to make sure we call 
KeyValueWrapper.erase() on the equivalent `*.Destroy()` function, again the 
example is WindowBase::Destroy().

When there is multiple callbacks simultaneously per program, we can use a 
combination of CallbackWrapper to wrap it and KeyValueWrapper to 
associate them with an id you can later use to remove it, as we use in both
AddEventWatch() and AddTimer().

@todo Allow listener handle to be stored into a RAII object.

*/

/// @}
/// @}

/**
@defgroup FmtString Formatted string

C++ has the type-safe [std::format/fmt](https://en.cppreference.com/w/cpp/utility/format/spec)
style, so where applicable we wrap the SDL's C style formatted string with the
it.

@todo make an example on how to wrap (see SetError() for now)
*/

/**
@defgroup WrapState Wrapped state

We define an wrapped state when we have a opaque void*, an integer or enum that
just represent some state or handle that does not relate to any allocation (it
is safe to copy around), but it has some OO-like macro properties to query and or 
OO-like functions to manipulate it.

An wrap state is class with a single attribute storing the state, and with a 
constexpr converting constructor from the state type and a constexpr converting
operator back to it. This usually is not recommended in C++ style guides, but
we do this in order to make the state usable transparently. If there is no need
for using it transparently. then we have a get function instead.

If the state has some sort of @b invalid or @b uninitialized state, we also
create a converting operator to bool that is true when the state valid.

*/

/**
@defgroup WrapExtend Wrap extending struct

This is similar to @ref WrapState, but when the state is a struct. In that case
we can have similar results by extending it and adding the member functions on 
the extended type. 

The extended type must not have any attribute and must have a constructor 
to the original type. If the state has some sort of @b invalid or @b uninitialized
state, we also create a converting operator to bool that is true when the state
valid.
*/

/// @}
